bloodpressure <- readRDS("F:/Github/3_mainor/myR/Supervised_Learning_Regression/bloodpressure.rds")
bloodpressure <- readRDS("F:/Github/3_mainor/myR/Supervised_Learning_Regression/bloodpressure.rds")
View(bloodpressure)
# unemployment is in the workspace (with predictions)
summary(unemployment)
unemployment <- readRDS("F:/Github/3_mainor/myR/Supervised_Learning_Regression/unemployment.rds")
unemployment = readRDS("unemployment.rds")
# unemployment is loaded in the workspace
summary(unemployment)
# Define a formula to express female_unemployment as a function of male_unemployment
fmla <- female_unemployment~male_unemployment
# Print it
fmla
# Use the formula to fit a model: unemployment_model
unemployment_model <- lm(fmla, data=unemployment)
# Print it
unemployment_model
# broom and sigr are already loaded in your workspace
# Print unemployment_model
unemployment_model
# Call summary() on unemployment_model to get more details
summary(unemployment_model)
# Call glance() on unemployment_model to see the details in a tidier form
glance(unemployment_model)
# Call wrapFTest() on unemployment_model to see the most relevant details
wrapFTest(unemployment_model)
# Call glance() on unemployment_model to see the details in a tidier form
broom::glance(unemployment_model)
library(broom)
require(broom)
# Call glance() on unemployment_model to see the details in a tidier form
broom::glance(unemployment_model)
install.packages(broom)
require("broom")
install.packages("broom")
install.packages("sigr")
library(broom)
library(sign)
library(sigr)
# broom and sigr are already loaded in your workspace
# Print unemployment_model
unemployment_model
# Call summary() on unemployment_model to get more details
summary(unemployment_model)
# Call glance() on unemployment_model to see the details in a tidier form
broom::glance(unemployment_model)
# Call wrapFTest() on unemployment_model to see the most relevant details
sigr::wrapFTest(unemployment_model)
# unemployment is in your workspace
summary(unemployment)
# newrates is in your workspace
male_unemployment = c(5)
newrates = data.frame(female_unemployment)
newrates = data.frame(male_unemployment)
# Predict female unemployment in the unemployment data set
unemployment$prediction <-  predict(unemployment_model)
# load the ggplot2 package
library(ggplot2)
# Make a plot to compare predictions to actual (prediction on x axis)
ggplot(unemployment, aes(x = prediction, y = female_unemployment)) +
geom_point() +
geom_abline(color = "blue")
# Predict female unemployment rate when male unemployment is 5%
pred <- predict(unemployment_model, newdata = newrates)
# Print it
pred
bloodpressure <- readRDS("F:/Github/3_mainor/myR/Supervised_Learning_Regression/bloodpressure.rds")
# bloodpressure is in the workspace
summary(bloodpressure)
# Create the formula and print it
fmla <- blood_pressure~age+weight
fmla
# Fit the model: bloodpressure_model
bloodpressure_model <- lm(fmla, bloodpressure)
# Print bloodpressure_model and call summary()
bloodpressure_model
summary(bloodpressure_model)
# bloodpressure is in your workspace
summary(bloodpressure)
# bloodpressure_model is in your workspace
bloodpressure_model
# predict blood pressure using bloodpressure_model :prediction
bloodpressure$prediction <- predict(bloodpressure_model, bloodpressure)
# plot the results
ggplot(data=bloodpressure, aes(x=prediction, y=blood_pressure)) +
geom_point() +
geom_abline(color = "blue")
# unemployment, unemployment_model are in the workspace
summary(unemployment)
summary(unemployment_model)
# Make predictions from the model
unemployment$predictions <- predict(unemployment_model, unemployment)
# Fill in the blanks to plot predictions (on x-axis) versus the female_unemployment rates
ggplot(unemployment, aes(x = predictions, y = female_unemployment)) +
geom_point() +
geom_abline()
# From previous step
unemployment$predictions <- predict(unemployment_model)
# Calculate residuals
unemployment$residuals <- unemployment$female_unemployment - unemployment$predictions
# Fill in the blanks to plot predictions (on x-axis) versus the residuals
ggplot(unemployment, aes(x = predictions, y = residuals)) +
geom_pointrange(aes(ymin = 0, ymax = residuals)) +
geom_hline(yintercept = 0, linetype = 3) +
ggtitle("residuals vs. linear model prediction")
# Load the package WVPlots
install.packages("WVPlots")
# unemployment is in the workspace (with predictions)
summary(unemployment)
# unemployment_model is in the workspace
summary(unemployment_model)
# Load the package WVPlots
#install.packages("WVPlots")
library(WVPlots)
# Plot the Gain Curve
GainCurvePlot(unemployment, "predictions", "female_unemployment", "Unemployment model")
